// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Anderson.Produtos.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProductHandleFeature : object, Xunit.IClassFixture<ProductHandleFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProductHandle.feature"
#line hidden
        
        public ProductHandleFeature(ProductHandleFeature.FixtureData fixtureData, Anderson_Produtos_SpecFlow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ProductHandle", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ADD PRODUCT")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductHandle")]
        [Xunit.TraitAttribute("Description", "ADD PRODUCT")]
        public void ADDPRODUCT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ADD PRODUCT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("The database is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table1.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.00",
                            "FakePath1"});
#line 6
 testRunner.When("I add product", ((string)(null)), table1, "When ");
#line hidden
#line 9
 testRunner.Then("The result for add should be Success and the return should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table2.AddRow(new string[] {
                            "2",
                            "Test2",
                            "20.00",
                            ""});
#line 11
 testRunner.When("I add product", ((string)(null)), table2, "When ");
#line hidden
#line 14
 testRunner.Then("The result for add should be Error and the return should be Imagem é obrigatório", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath",
                            ""});
                table3.AddRow(new string[] {
                            "3",
                            "",
                            "30.00",
                            "FakePath3",
                            "Error"});
#line 16
 testRunner.When("I add product", ((string)(null)), table3, "When ");
#line hidden
#line 19
 testRunner.Then("The result for add should be Error and the return should be Nome é obrigatório", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.When("I request for all products on the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table4.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.0",
                            "FakePath1"});
#line 22
 testRunner.Then("The return for all products on the system should be", ((string)(null)), table4, "Then ");
#line hidden
#line 25
 testRunner.And("The result for all products on the system should be Success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CHANGE PRODUCT")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductHandle")]
        [Xunit.TraitAttribute("Description", "CHANGE PRODUCT")]
        public void CHANGEPRODUCT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CHANGE PRODUCT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table5.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.00",
                            "FakePath1"});
                table5.AddRow(new string[] {
                            "2",
                            "Test2",
                            "20.00",
                            "FakePath3"});
#line 28
 testRunner.Given("These products exists on the system for change", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table6.AddRow(new string[] {
                            "2",
                            "ALTERADO",
                            "70.00",
                            "FakePath1"});
#line 32
 testRunner.When("I change the product", ((string)(null)), table6, "When ");
#line hidden
#line 35
 testRunner.Then("The result for change product should be Success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table7.AddRow(new string[] {
                            "5",
                            "ALTERADO",
                            "90.00",
                            "FakePath1"});
#line 37
 testRunner.When("I change the product", ((string)(null)), table7, "When ");
#line hidden
#line 40
 testRunner.Then("The result for change product should be Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.When("I request for all products on the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table8.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.0",
                            "FakePath1"});
                table8.AddRow(new string[] {
                            "2",
                            "ALTERADO",
                            "70.0",
                            "FakePath1"});
#line 43
 testRunner.Then("The return for all products on the system should be", ((string)(null)), table8, "Then ");
#line hidden
#line 47
 testRunner.And("The result for all products on the system should be Success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="REMOVE PRODUCT")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductHandle")]
        [Xunit.TraitAttribute("Description", "REMOVE PRODUCT")]
        public void REMOVEPRODUCT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("REMOVE PRODUCT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table9.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.00",
                            "FakePath1"});
                table9.AddRow(new string[] {
                            "2",
                            "Test2",
                            "20.00",
                            "FakePath3"});
#line 52
 testRunner.Given("These products exists on the system for remove", ((string)(null)), table9, "Given ");
#line hidden
#line 56
 testRunner.When("I remove the product 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("The result for remove product should be Success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.When("I remove the product 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("The result for remove product should be Error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.When("I request for all products on the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Value",
                            "ImagePath"});
                table10.AddRow(new string[] {
                            "1",
                            "Test1",
                            "10.0",
                            "FakePath1"});
#line 63
 testRunner.Then("The return for all products on the system should be", ((string)(null)), table10, "Then ");
#line hidden
#line 66
 testRunner.And("The result for all products on the system should be Success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProductHandleFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProductHandleFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
